import binascii

from base64 import urlsafe_b64decode, urlsafe_b64encode
from datetime import datetime
from typing import Annotated

from pydantic import AfterValidator, BaseModel, Field

def _validate_public_key(value: str) -> str:
    try:
        raw_bytes = urlsafe_b64decode(value)
        if len(raw_bytes) != 32:
            raise ValueError('Value must have an unencoded length of 32 bytes')
        return urlsafe_b64encode(raw_bytes).decode()
    except binascii.Error:
        raise ValueError('Value is not valid Base64')

def _validate_message(value: str) -> str:
    try:
        return urlsafe_b64encode(urlsafe_b64decode(value)).decode()
    except binascii.Error:
        raise ValueError('Value is not valid Base64')

def _validate_signature(value: str) -> str:
    try:
        raw_bytes = urlsafe_b64decode(value)
        if len(raw_bytes) != 64:
            raise ValueError('Value must have an unencoded length of 64 bytes')
        return urlsafe_b64encode(raw_bytes).decode()
    except binascii.Error:
        raise ValueError('Value is not valid Base64')

type _PublicKey = Annotated[
    str,
    AfterValidator(_validate_public_key),
]

type _Message = Annotated[
    str,
    AfterValidator(_validate_message),
]

type _Signature = Annotated[
    str,
    AfterValidator(_validate_signature),
]

class _BaseRequestModel(BaseModel):
    public_key: Annotated[
        _PublicKey,
        Field(
            description=(
                'The Base64-encoding of a 32-byte public key owned by the '
                'user.'
            ),
        ),
    ]

class _RetrievalFilterModel(BaseModel):
    sender_keys: Annotated[
        list[str] | None,
        Field(
            description=(
                'An optional list of Base64-encoded 32-byte public keys. '
                'If provided, only data sent by users with these keys will be '
                'retrieved.'
            ),
            default=None,
        ),
    ]
    min_datetime: Annotated[
        datetime | None,
        Field(
            description=(
                'An optional datetime that represents the earliest timestamp '
                'retrieved data should have. This is intended to avoid '
                'unneccessarily repeating retrievals.'
            ),
            default=None,
        ),
    ]

class PostKeyExchangeRequestModel(_BaseRequestModel):
    recipient_public_key: Annotated[
        _PublicKey,
        Field(
            description=(
                'The Base64-encoding of a 32-byte public key owned by the '
                'desired recipient of the key exchange.'
            ),
        ),
        
    ]
    exchange_key: Annotated[
        _PublicKey,
        Field(
            description=('The Base64-encoding of a 32-byte exchange key.'),
        ),
    ]
    signature: Annotated[
        _Signature,
        Field(
            description=(
                'The Base64-encoding of a signature generated by signing the '
                'raw bytes of the transmitted exchange key with the private '
                'key corresponding to the sender\'s public key.'
            ),
        ),
    ]

class PostMessageRequestModel(_BaseRequestModel):
    recipient_public_key: Annotated[
        _PublicKey,
        Field(
            description=(
                'The Base64-encoding of a 32-byte public key owned by the '
                'desired recipient of the encrypted message.'
            ),
        ),
    ]
    encrypted_text: Annotated[
        _Message,
        Field(
            description=(
                'A Base64-encoding of the encrypted message, generated using '
                'a shared secret encryption key prior to transmission. This '
                'should typically be the output of a Fernet '
                'encryption.'
            ),
        ),
    ]
    signature: Annotated[
        _Signature,
        Field(
            description=(
                'The Base64-encoding of a signature generated by signing the '
                'encrypted message. The signature should typically be '
                'generated directly from the output of a Fernet encryption.'
            ),
        ),
    ]

class RetrieveMessagesRequestModel(_BaseRequestModel, _RetrievalFilterModel):
    pass
